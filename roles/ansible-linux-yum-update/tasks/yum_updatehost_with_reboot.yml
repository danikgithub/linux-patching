---
- name: "set patching time"
  set_fact:
    timestamp: "{{ ansible_date_time.iso8601_basic_short }}"
  delegate_to: localhost

# update systems using yum  and compare running kernel version
- name: "Install Latest yum packages"
  yum:
    name: "*"
    state: "latest"
#    disablerepo={{ yum_disablerepo }}
#    enablerepo={{ yum_enablerepo }}
#    exclude={{ yum_exclude }}
  when: ansible_distribution in supported_distros
  register: yum_result

- block:
  - name: "Log if yum update failed"
    lineinfile:
      line: "HOSTNAME: {{ inventory_hostname }} | yum update failed, PLEASE CHECK THE SERVER"
      dest: "{{ local_dir }}/update.{{ inventory_hostname }}.yum.{{ timestamp }}"
      create: yes
    delegate_to: localhost
    become: yes

  - name: "Yum failed"
    debug:
      msg: "HOSTNAME: {{ inventory_hostname }} | yum update failed, PLEASE CHECK THE SERVER"
    when: yum_result is defined and yum_result is failed

- block:
  - name: "Log if nothing to update"
    lineinfile:
      line: "HOSTNAME: {{ inventory_hostname }} |  Nothing to update."
      dest: "{{ local_dir }}/update.{{ inventory_hostname }}.yum.{{ timestamp }}"
      create: yes
    delegate_to: localhost
    become: yes


  - name: "nothing to update"
    debug:
      msg: "HOSTNAME: {{ inventory_hostname }} |  Nothing to update."
    when: yum_result is defined and yum_result is succeeded and not yum_result.changed


- block:
  - name: "Log if yum update success"
    lineinfile:
      line: "HOSTNAME: {{ inventory_hostname }} | yum update succeeded."
      dest: "{{ local_dir }}/update.{{ inventory_hostname }}.yum.{{ timestamp }}"
      create: yes
    delegate_to: localhost
    become: yes

  - name: "Update is done "
    debug:
      msg: "HOSTNAME: {{ inventory_hostname }} | yum update succeeded."
    when: yum_result is defined and yum_result is succeeded and yum_result.changed

# check if kernel was updated (last kernel and running kernel
  - name: "Comparing last kernel and running kernel"
    shell:  rpm -q --last kernel  | head -1 | awk '{ print $1}' | sed 's/kernel-//g'
    args:
      warn: false
    register: LAST_KERNEL

## check system pre reboot uptime
  - name: Check uptime before system reboot
    shell: uptime
    register: UPTIME_POST_REBOOT

  - debug: msg={{UPTIME_POST_REBOOT.stdout}}


  - name: get current time before reboot
    shell: /bin/date +%s
    register: before_reboot


  - name: "Reboot the system and wait for ssh to become available"
    reboot:
      msg:  "Reboot initiated by Ansible after system update"
      connect_timeout: "{{ server_update_reboot_connect_timeout }}"
      pre_reboot_delay: "{{ server_update_reboot_pre_reboot_delay }}"
      post_reboot_delay: "{{ server_update_reboot_post_reboot_delay }}"
      reboot_timeout: "{{ server_update_reboot_reboot_timeout }}"
    register: reboot_result
#    when: reboot_default | bool and reboot_hint_result | bool
    when: ansible_kernel != LAST_KERNEL.stdout or  ansible_kernel == LAST_KERNEL.stdout

  - name: reboot time
    debug:
      msg: "The system rebooted in {{ reboot_result.elapsed }} seconds."

  - name: verify a reboot was actually initiated
    shell: (( `date +%s` - `awk -F . '{print $1}' /proc/uptime` > {{ before_reboot.stdout }} ))

## check system post reboot uptime
  - name: Check uptime after system reboot
    shell: uptime
    register: UPTIME_POST_REBOOT

  - debug: msg={{UPTIME_POST_REBOOT.stdout}}
